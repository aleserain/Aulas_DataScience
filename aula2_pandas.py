# -*- coding: utf-8 -*-
"""Aula2_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oKGGDMhaz2a16z7NFfZmnHOY1gfjjYok
"""

#Primeiro passo, importar pandas:
import pandas as pd

#Segundo passo, leitura dos arquivos
#Usar shhet names pra ler só uma aba
#Usar skiprows pra ler apenas da linha 5 em diante, sem o cabeçalho
#usar virgula pra ver as opçoes
df1 = pd.read_excel("Aracaju.xlsx")
df2 = pd.read_excel("Fortaleza.xlsx")
df3 = pd.read_excel("Natal.xlsx")
df4 = pd.read_excel("Recife.xlsx")
df5 = pd.read_excel("Salvador.xlsx")

df1.head()

#Terceiro passo: juntar os arquivos para trabalhar com todas cidades
df = pd.concat([df1, df2, df3, df4, df5])

df.head()

df.tail() #ve as cinco primeiras linhas e as cinco ultimas para confirmar

df.sample(5)

df.dtypes

#Como alterar o tipo de dado da coluna como o LojaID que nao vai usar em calculo portanto transformar em objeto
df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

#verificar se existem valores nunlos ou faltantes, da pra apagar as linhas, substituir por media ou soma de vendas ou zero
df.isnull().sum()

#para substituir pela média:
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True) #passar o valor que quer substituir, que neste caso éa média e inplace pq quer que este seja modificado em memoria, senao apaga a linha mas vai continuar c os valores nulos portanto apagar E substituir

df.isnull().sum()

df.sample(15) #ele vai nas linhas c valores nulos e coloca a média de tudo, mas pode ser por zero

df["Vendas"].fillna(0, inplace=True)

#para apagar as linhas com valores nulos
df.dropna(inplace=True)

#ou apagar linhas com valores nulos em apenas uma coluna
df.dropna(subset=["Vendas"], inplace=True)

#remover as linhas com valores faltantes em todas colunas
df.dropna(how= "all", inplace=True)

#Criar colunas novas como de Receita (vendas x quantidade)
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

#e se tivesse a receita mas não a quantidade?
df["Receitas/Vendas"] = df["Receita"] / df["Vendas"]

df.head()

#Ver a maior receita:
df["Receita"].max()

#A menor
df["Receita"].min()

#Mas qual a loja que vendeu maior e menor receita?
df.nlargest(3, "Receita")

df.nsmallest(3, "Receita")

#Agrupar por cidade a soma da receita
df.groupby("Cidade")["Receita"].sum()

#Para ordenar o conjunto de dados: #false porque do maior para o menor
df.sort_values("Receita", ascending=False).head(10)

#Para trabalhar com datas, deve passar para o formato de numero inteiro
df["Data"] = df["Data"].astype("int64")

#Para isto, primeiro deve verificar o tipo de dado da coluna
df.dtypes

df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#saber qual a receita por ano, se a receita aumenta com o tempo
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna com o ano
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

#Como extrair o mes e o dia
df["mes_venda"], df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

df.sample(5)

#ver a data mais antiga
df["Data"].min()

#Calcular a diferença entre dias - como n tem duas datas, colocar a data minima
df["Diferença_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#Criar a coluna de trimestre
df["trimestre_venda"] = df["Data"].dt.quarter

df.sample(5)

#Filtrar as vendas de março de 2019
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19

"""**Visualização de dados**"""

df["LojaID"].value_counts(ascending=False) #do maior para o menor pra ver quantas linhas tem

#Grafico de barras biblioteca math.live integrada com biblioteca Pandas
df["LojaID"].value_counts(ascending=False).plot.bar()

#para barras horizontais
df["LojaID"].value_counts(ascending=False).plot.barh()

#para barras horizontais do maior pro menor
df["LojaID"].value_counts(ascending=True).plot.barh()

df["LojaID"].value_counts(ascending=True).plot.barh(); #sem a linha antes do grafico

#grafico de pizza, por ano e receita
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

#Total de vendas por cidade
df["Cidade"].value_counts()

#Adicionar titulo e nome nos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total vendas por cidade")
plt.xlabel("Cidade")
plt.ylabel("Total vendas");

#Para alterar a cor
df["Cidade"].value_counts().plot.bar(title="Total vendas por cidade", color="green")
plt.xlabel("Cidade")
plt.ylabel("Total vendas");

#Alterar o estilo: ver site matplotlib e escolher o estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title = "Total produtos vendidos por mes") #agrupou mes de vendas e soma e plot para grafico de linhas
plt.xlabel("Mes")
plt.ylabel("Total produtos vendidos");
plt.legend()

df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionar apenas 2019
df_2019 = df[df["Ano_Venda"] == 2019]

df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v") #marcador triangulo ou * ou o
plt.xlabel("Mes")
plt.ylabel("Total produtos vendidos");
plt.legend()

#Grafico de histograma
plt.hist(df["Qtde"], color = "green"); #tb tem as cores no site

plt.scatter(x = df_2019["dia_venda"], y=df_2019["Receita"]);

#Para salvar em png, salvo junto com as planilhas na pasta do drive
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v") 
plt.title("quantidade produtos vendidos")
plt.xlabel("Mes")
plt.ylabel("Total produtos vendidos");
plt.legend()
plt.savefig("grafico QTDE x mes.png")